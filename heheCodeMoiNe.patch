diff --git a/package.json b/package.json
index d3e426b..7fadcd9 100644
--- a/package.json
+++ b/package.json
@@ -27,6 +27,7 @@
         "dateformat": "^5.0.3",
         "dotenv": "^16.0.3",
         "express": "^4.18.2",
+        "firebase": "^10.9.0",
         "joi": "^17.8.3",
         "jsonwebtoken": "^9.0.0",
         "mongoose": "^7.0.2",
@@ -46,4 +47,4 @@
         "vite": "^4.1.4",
         "vite-plugin-node": "^3.0.2"
     }
-}
\ No newline at end of file
+}
diff --git a/src/app.ts b/src/app.ts
index 5fdc40b..578f015 100644
--- a/src/app.ts
+++ b/src/app.ts
@@ -3,8 +3,7 @@ import dotenv from "dotenv";
 import mongoose from "mongoose";
 import cors from "cors";
 import router from "./routers/index";
-import CategoryModel from "./models/category";
-import axios from "axios";
+
 dotenv.config();
 const { PORT, DB_URL } = process.env;
 
@@ -25,6 +24,55 @@ connect();
 
 app.use("/api", router);
 
+// import { initializeApp } from "firebase/app";
+// import {
+//   getAuth,
+//   signInWithPhoneNumber,
+//   RecaptchaVerifier,
+// } from "firebase/auth";
+
+// const firebaseConfig = {
+//   apiKey: "AIzaSyBMwhg1JxIyWyKgHDnodLjZ7Wvlk1kg118",
+//   authDomain: "meowmeow-8444f.firebaseapp.com",
+//   projectId: "meowmeow-8444f",
+//   storageBucket: "meowmeow-8444f.appspot.com",
+//   messagingSenderId: "519401576004",
+//   appId: "1:519401576004:web:67438d9ab8546ea1410e11",
+// };
+
+// // Khởi tạo Firebase
+// const firebaseApp = initializeApp(firebaseConfig);
+// const auth = getAuth(firebaseApp);
+
+// app.post("/api/send-otp", async (req, res) => {
+//   const { otp, phoneNumber } = req.body;
+
+//   if (!otp || !phoneNumber) {
+//     return res.status(400).json({ message: "Missing OTP or phone number." });
+//   }
+
+//   try {
+//     const appVerifier = new RecaptchaVerifier("recaptcha-container-id", {
+//       size: "invisible",
+//       callback: (response) => {
+//         // This will be triggered when reCAPTCHA has verified successfully
+//         console.log("reCAPTCHA verified successfully", response);
+//       },
+//       "expired-callback": () => {
+//         // This will be triggered when the reCAPTCHA response expires
+//         console.log("reCAPTCHA response expired");
+//       },
+//     });
+
+//     await signInWithPhoneNumber(auth, phoneNumber, appVerifier);
+
+//     return res.status(200).json({ message: "OTP sent successfully." });
+//   } catch (error) {
+//     console.error("Error sending OTP:", error);
+//     return res.status(500).json({ message: "Failed to send OTP." });
+//   }
+// });
+
 app.post("/api/send-otp", async (req, res) => {
   const { otp, phoneNumber } = req.body;
 
diff --git a/src/controllers/auth.ts b/src/controllers/auth.ts
index b31ddee..4115ffb 100644
--- a/src/controllers/auth.ts
+++ b/src/controllers/auth.ts
@@ -5,8 +5,10 @@ import jwt from "jsonwebtoken";
 import { signinSchema, signupSchema } from "../validation/auth";
 import auth from "../models/auth";
 import AuthModel from "../models/auth";
-import { OrderDetailModel } from "../models/bill";
+import BillModel, { OrderDetailModel } from "../models/bill";
 import mongoose from "mongoose";
+import VoucherModel from "../models/voucher";
+import MyVoucherModel from "../models/myVoucher";
 // // xong auth
 dotenv.config();
 export const getAllUser = async (req, res) => {
@@ -20,13 +22,13 @@ export const getAllUser = async (req, res) => {
     const usersWithStats = await Promise.all(
       users.map(async (user) => {
         // Lấy danh sách hóa đơn của người dùng
-        const userBills = await OrderDetailModel.find({
+        const userBills = await BillModel.find({
           iduser: user._id,
         });
         // Tính tổng số hóa đơn
         const totalBillCount = userBills.length;
         // Tính tổng tiền đã mua
-        const totalAmount = userBills.reduce(
+        const totalAmountNew = userBills.reduce(
           (acc, datas) => acc + datas.money,
           0
         );
@@ -46,7 +48,7 @@ export const getAllUser = async (req, res) => {
           jobPosition: user.jobPosition,
           discount_points: user.discount_points,
           totalBillCount: totalBillCount,
-          totalAmount: totalAmount,
+          totalAmount: totalAmountNew,
         };
       })
     );
@@ -134,6 +136,16 @@ export const signup = async (req, res) => {
     const token = jwt.sign({ _id: user._id }, process.env.SECRET_KEY, {
       expiresIn: 60 * 60,
     });
+
+    const dataVc = await VoucherModel.find();
+    for (const item of dataVc) {
+      await MyVoucherModel.create({
+        idVoucher: item?._doc?._id,
+        idUser: user?._id,
+        quantity: 1,
+      });
+    }
+
     return res.status(201).json({
       message: "Đăng ký thành công",
       accessToken: token,
@@ -279,6 +291,15 @@ export const createAuth = async (req, res) => {
       expiresIn: 60 * 60, // Token hết hạn sau 1 giờ
     });
 
+    const dataVc = await VoucherModel.find();
+    for (const item of dataVc) {
+      await MyVoucherModel.create({
+        idVoucher: item?._doc?._id,
+        idUser: newUser?._id,
+        quantity: 1,
+      });
+    }
+
     return res.status(200).json({
       message: "Tạo tài khoản thành công",
       user: newUser,
@@ -290,6 +311,48 @@ export const createAuth = async (req, res) => {
     });
   }
 };
+export const createKhachVangLai = async (req, res) => {
+  try {
+    const { name, email, password, phone, address } = req.body;
+
+    // Kiểm tra email đã tồn tại trong hệ thống hay chưa
+    const userExist = await AuthModel.findOne({ email });
+    if (userExist) {
+      return res.status(400).json({
+        message: "Email đã tồn tại",
+      });
+    }
+
+    // Mã hóa mật khẩu
+    const hashedPassword = await bcrypt.hash(password, 10);
+
+    // Tạo mới người dùng
+    const newUser = await AuthModel.create({
+      name,
+      email,
+      password: hashedPassword,
+      phone,
+      address,
+    });
+    newUser.password = undefined;
+    const dataVc = await VoucherModel.find();
+    for (const item of dataVc) {
+      await MyVoucherModel.create({
+        idVoucher: item?._doc?._id,
+        idUser: newUser?._id,
+        quantity: 1,
+      });
+    }
+    return res.status(200).json({
+      message: "Tạo tài khoản thành công",
+      user: newUser,
+    });
+  } catch (error) {
+    return res.status(500).json({
+      message: "Lỗi khi tạo tài khoản: " + error.message,
+    });
+  }
+};
 
 export const editAuth = async (req, res) => {
   try {
diff --git a/src/controllers/bill.ts b/src/controllers/bill.ts
index ff3f4ca..eb2cad5 100644
--- a/src/controllers/bill.ts
+++ b/src/controllers/bill.ts
@@ -23,14 +23,6 @@ export const createBill = async (req: any, res: any) => {
     }
 
     const idbill = bill._id;
-    const iduser = bill.iduser;
-    const userAuth = await AuthModel.findByIdAndUpdate(
-      iduser,
-      {
-        discount_points: bill.money * 0.03,
-      },
-      { new: true }
-    );
     const billdetails = req.body.billdetails;
     for (const TypeBillDetail of billdetails) {
       const newBillDetail = { ...TypeBillDetail, idbill };
@@ -53,7 +45,6 @@ export const createBill = async (req: any, res: any) => {
       data: {
         bill,
         billdetails: BillDetailData,
-        discount_points: bill.money * 0.03,
         changeOrder,
       },
     });
diff --git a/src/controllers/deleteAll/deleteAll.ts b/src/controllers/deleteAll/deleteAll.ts
index e5e489c..9867b2c 100644
--- a/src/controllers/deleteAll/deleteAll.ts
+++ b/src/controllers/deleteAll/deleteAll.ts
@@ -12,12 +12,12 @@ export const deleteAllData = async (req: any, res: any) => {
     // await ProductModel.deleteMany();
     // await TypeProductModel.deleteMany();
     // await CategoryModel.deleteMany();
-    //await VoucherModel.deleteMany();
+    await VoucherModel.deleteMany();
     // await TypeVoucherModel.deleteMany();
     // await AuthModel.deleteMany();
-    await BillModel.deleteMany({ paymentmethods: "Thanh toán MoMo" });
+    //await BillModel.deleteMany({ paymentmethods: "Thanh toán MoMo" });
     // await OrderDetailModel.deleteMany();
-    //await MyVoucherModel.deleteMany();
+    await MyVoucherModel.deleteMany();
 
     return res.status(200).json({
       message: "Xoá tất cả dữ liệu thành công thành công!",
diff --git a/src/controllers/myVoucher.ts b/src/controllers/myVoucher.ts
index 35bc359..c48ade3 100644
--- a/src/controllers/myVoucher.ts
+++ b/src/controllers/myVoucher.ts
@@ -1,3 +1,5 @@
+import AuthModel from "../models/auth";
+import BillModel, { OrderDetailModel } from "../models/bill";
 import MyVoucherModel from "../models/myVoucher";
 import TypeVoucherModel from "../models/typeVoucher";
 import VoucherModel from "../models/voucher";
@@ -47,28 +49,79 @@ export const getAllMyVoucher = async (req, res) => {
 export const getAllMyVoucherUser = async (req, res) => {
   try {
     const idUser = req.params.id;
+
+    const userBills = await BillModel.find({
+      iduser: idUser,
+    });
+    const totalAmountNew = userBills.reduce(
+      (acc, datas) => acc + datas.money,
+      0
+    );
+    await AuthModel.findByIdAndUpdate(
+      idUser,
+      { totalAmount: totalAmountNew },
+      { new: true }
+    );
+    const dataVc = await VoucherModel.find();
+    const xemSetLaiDanhSachVoucher = await Promise.all(
+      dataVc.map(async (vc) => {
+        const phanPhatVoucher = [
+          {
+            minTotalBill: vc?._doc?.minTotalBill1,
+            quantity: vc?._doc?.quantity1,
+          },
+          {
+            minTotalBill: vc?._doc?.minTotalBill2,
+            quantity: vc?._doc?.quantity2,
+          },
+          {
+            minTotalBill: vc?._doc?.minTotalBill3,
+            quantity: vc?._doc?.quantity3,
+          },
+          {
+            minTotalBill: vc?._doc?.minTotalBill4,
+            quantity: vc?._doc?.quantity4,
+          },
+        ];
+        // Sắp xếp phanPhatVoucher theo thứ tự giảm dần của minTotalBilll
+        const phanPhatVoucherSort = phanPhatVoucher.sort((a, b) => {
+          return parseInt(b.minTotalBill) - parseInt(a.minTotalBill);
+        });
+
+        for (const item of phanPhatVoucherSort) {
+          if (Number(totalAmountNew) >= Number(item.minTotalBill)) {
+            await MyVoucherModel.findOneAndUpdate(
+              { idVoucher: vc?._doc?._id },
+              {
+                quantity: Number(item.quantity),
+              },
+              { new: true }
+            );
+            break;
+          }
+        }
+      })
+    );
+
     const data = await MyVoucherModel.find({ idUser: idUser });
     if (!data) {
       return res.status(404).json({
         message: "lấy danh sách khuyến mại thất bại",
       });
     }
-
     const myVoucher = await Promise.all(
       data.map(async (item) => {
-        console.log("🚀 ~ data.map ~ item:", item);
         const voucher = await VoucherModel.findById(item?._doc?.idVoucher);
         if (voucher !== null) {
           return { ...item?._doc, voucher };
         }
       })
     );
-    // Filter out null vouchers
-    const validVouchers = myVoucher.filter((voucher) => voucher !== undefined);
 
     return res.status(200).json({
       message: "Lấy danh sách khuyến mại thành công",
-      datas: validVouchers,
+      totalAmount: totalAmountNew,
+      datas: myVoucher,
     });
   } catch (error) {
     return res.status(500).json({
diff --git a/src/controllers/voucher.ts b/src/controllers/voucher.ts
index e9c598e..eb558c4 100644
--- a/src/controllers/voucher.ts
+++ b/src/controllers/voucher.ts
@@ -6,56 +6,66 @@ import VoucherModel from "../models/voucher";
 import Voucher from "../models/voucher";
 export const createVoucher = async (req, res) => {
   try {
-    const voucher = req.body.voucher;
-    const phanPhatVoucher = req.body.phanPhatVoucher;
+    const voucher = req.body;
     const data = await Voucher.create(voucher);
     if (!data) {
       return res.status(404).json({
-        message: "tạo khuyến mãi thất bại",
+        message: "Tạo khuyến mãi thất bại",
       });
     }
 
     const idVoucher = data._id;
-    const users: any = await AuthModel.find();
-    let totalQuantity: number = 0; // Tổng số lượng voucher đã tạo
-
+    const users = await AuthModel.find();
+    const phanPhatVoucher = [
+      {
+        minTotalBill: req.body.minTotalBill1,
+        quantity: req.body.quantity1,
+      },
+      {
+        minTotalBill: req.body.minTotalBill2,
+        quantity: req.body.quantity2,
+      },
+      {
+        minTotalBill: req.body.minTotalBill3,
+        quantity: req.body.quantity3,
+      },
+    ];
     // Sắp xếp phanPhatVoucher theo thứ tự giảm dần của minTotalBill
     const phanPhatVoucherSort = phanPhatVoucher.sort((a, b) => {
-      return parseInt(b.minTotalBil) - parseInt(a.minTotalBil);
+      return parseInt(b.minTotalBill) - parseInt(a.minTotalBill);
     });
 
+    // Mảng để lưu trữ ID của các người dùng đã được thêm voucher
+    let addedUsers: any = [];
+
     // Duyệt qua từng người dùng
     for (const user of users) {
-      // Duyệt qua các điều kiện từ phanPhatVoucher để cập nhật quantity
-      let quantity = 1;
-
       for (const item of phanPhatVoucherSort) {
-        if (Number(user?.totalAmount) >= Number(item.minTotalBil)) {
-          quantity = Number(item.quantity);
-          break; // Thoát vòng lặp nếu đã tìm được điều kiện phù hợp
+        if (
+          user &&
+          user._id &&
+          Number(user.totalAmount) >= Number(item.minTotalBill) &&
+          !addedUsers.includes(user?._id.toString())
+        ) {
+          await MyVoucherModel.create({
+            idVoucher: idVoucher,
+            idUser: user._id.toString(),
+            quantity: Number(item.quantity),
+          });
+          addedUsers.push(user?._id.toString()); // Thêm ID người dùng vào mảng
+          break; // Thoát vòng lặp sau khi thêm voucher cho người dùng
         }
       }
-
-      // Tạo voucher cho user với số lượng đã tính toán
-      await MyVoucherModel.create({
-        idVoucher: idVoucher,
-        idUser: user?._id.toString(),
-        quantity: Number(quantity),
-      });
-
-      // Cộng dồn số lượng voucher đã tạo
-      totalQuantity += Number(quantity);
     }
 
+    console.log("🚀 ~ createVoucher ~ addedUsers:", addedUsers);
     return res.status(200).json({
-      message: "Tạo khuyến mãi thành công ",
-      totalQuantity: totalQuantity, // Trả về tổng số lượng voucher đã tạo
-
+      message: "Tạo khuyến mãi thành công",
       datas: data,
     });
   } catch (error) {
     return res.status(500).json({
-      message: "lỗi khi thêm voucher: " + error.message,
+      message: "Lỗi khi thêm voucher: " + error.message,
     });
   }
 };
@@ -120,7 +130,8 @@ export const getAllVoucher = async (req, res) => {
 };
 export const getDetailVoucher = async (req, res) => {
   try {
-    const data = await Voucher.findById(req.params.id, { ExistsInStock: true });
+    const id = req.params.id.trim();
+    const data = await Voucher.findById(id);
     // console.log(data);
     if (!data) {
       return res.status(404).json({
@@ -128,7 +139,7 @@ export const getDetailVoucher = async (req, res) => {
       });
     }
     const typeVoucher = await TypeVoucherModel.findById(
-      data?._doc?.idTypeVoucher
+      data?._doc?.idTypeVoucher.toString()
     );
 
     return res.status(200).json({
@@ -136,6 +147,7 @@ export const getDetailVoucher = async (req, res) => {
       datas: { ...data._doc, typeVoucher: typeVoucher._doc.name },
     });
   } catch (error) {
+    console.log("🚀 ~ returnres.status ~ error.message:", error.message);
     return res.status(500).json({
       message: error.message,
     });
@@ -166,6 +178,7 @@ export const removeVoucher = async (req, res) => {
 
 export const updateVoucher = async (req, res) => {
   try {
+    const dataCu = await Voucher.findById(req.params.id);
     const data = await Voucher.findByIdAndUpdate(req.params.id, req.body, {
       new: true,
     });
@@ -174,6 +187,75 @@ export const updateVoucher = async (req, res) => {
         message: "Cập nhật khuyến mại thất bại",
       });
     }
+
+    const idVoucher = data._id;
+    const users: any = await AuthModel.find();
+    const phanPhatVoucherCu = [
+      {
+        minTotalBillCu: dataCu.minTotalBill1,
+        quantityCu: dataCu.quantity1,
+      },
+      {
+        minTotalBillCu: dataCu.minTotalBill2,
+        quantityCu: dataCu.quantity2,
+      },
+      {
+        minTotalBillCu: dataCu.minTotalBill3,
+        quantityCu: dataCu.quantity3,
+      },
+    ];
+    const phanPhatVoucherMoi = [
+      {
+        minTotalBillMoi: req.body.minTotalBill1,
+        quantityMoi: req.body.quantity1,
+      },
+      {
+        minTotalBillMoi: req.body.minTotalBill2,
+        quantityMoi: req.body.quantity2,
+      },
+      {
+        minTotalBillMoi: req.body.minTotalBill3,
+        quantityMoi: req.body.quantity3,
+      },
+    ];
+    // Sắp xếp phanPhatVoucher theo thứ tự giảm dần của minTotalBilll
+    const phanPhatVoucherSortMoi = phanPhatVoucherMoi.sort((a, b) => {
+      return parseInt(b.minTotalBillMoi) - parseInt(a.minTotalBillMoi);
+    });
+
+    // Duyệt qua từng người dùng
+    for (const user of users) {
+      const myVoucher = await MyVoucherModel.findOne({
+        idUser: user?._id,
+        idVoucher: idVoucher,
+      });
+
+      if (myVoucher) {
+        for (const itemMoi of phanPhatVoucherSortMoi) {
+          if (Number(user?.totalAmount) >= Number(itemMoi.minTotalBillMoi)) {
+            const voucherphanphat = phanPhatVoucherCu.find(
+              (vc) => vc.minTotalBillCu === itemMoi.minTotalBillMoi
+            );
+
+            if (voucherphanphat) {
+              let quantity =
+                Number(itemMoi.quantityMoi) -
+                Number(voucherphanphat.quantityCu) +
+                Number(myVoucher?.quantity);
+              await MyVoucherModel.findByIdAndUpdate(
+                myVoucher?._id,
+                { quantity: quantity }, // Giá trị cập nhật
+                { new: true } // Tùy chọn để trả về tài liệu sau khi cập nhật
+              );
+              break; // Thoát vòng lặp nếu đã tìm được điều kiện phù hợp
+            }
+          }
+        }
+      }
+
+      // Cộng dồn số lượng voucher đã tạo
+    }
+
     return res.status(200).json({
       message: "Cập nhật khuyến mại thành công",
       datas: data,
diff --git a/src/models/voucher.ts b/src/models/voucher.ts
index 0bc0b78..08f981d 100644
--- a/src/models/voucher.ts
+++ b/src/models/voucher.ts
@@ -38,6 +38,32 @@ const voucherSchema = new mongoose.Schema<any>(
       type: Boolean,
       default: true,
     },
+
+    //phan phat voucher
+    minTotalBill1: {
+      type: Number,
+    },
+    quantity1: {
+      type: Number,
+    },
+    minTotalBill2: {
+      type: Number,
+    },
+    quantity2: {
+      type: Number,
+    },
+    minTotalBill3: {
+      type: Number,
+    },
+    quantity3: {
+      type: Number,
+    },
+    minTotalBill4: {
+      type: Number,
+    },
+    quantity4: {
+      type: Number,
+    },
   },
   { timestamps: true, versionKey: false }
 );
diff --git a/src/routers/auth.ts b/src/routers/auth.ts
index 15eeeb5..e109055 100644
--- a/src/routers/auth.ts
+++ b/src/routers/auth.ts
@@ -3,6 +3,7 @@ import {
   AuthWithRole,
   createAuth,
   deleteEmployee,
+  createKhachVangLai,
   editAuth,
   getAllUser,
   getOne,
@@ -21,6 +22,7 @@ const router: Router = express.Router();
 router.get("/", getAllUser);
 router.post("/signup", signup);
 router.post("/createAuth", createAuth);
+router.post("/createKhachVangLai", createKhachVangLai);
 router.patch("/editAuth/:id", editAuth);
 router.post("/signin", signin);
 router.delete("/:id", removeUser);
diff --git a/src/routers/voucher.ts b/src/routers/voucher.ts
index 8aee1b1..2148795 100644
--- a/src/routers/voucher.ts
+++ b/src/routers/voucher.ts
@@ -12,6 +12,6 @@ const router: Router = express.Router();
 router.get("/", getAllVoucher);
 router.get("/:id", getDetailVoucher);
 router.post("/", createVoucher);
-router.put("/:id", updateVoucher);
+router.patch("/:id", updateVoucher);
 router.delete("/:id", removeVoucher);
 export default router;
